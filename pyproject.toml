[project]
name = "repo-backup"
version = "1.2.0"
description = "Enterprise repository backup tool that syncs corporate Git repositories to local storage or AWS S3"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Derek", email = "noreply@hypersec.io"}
]
keywords = ["backup", "git", "github", "gitlab", "bitbucket", "s3", "enterprise"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Archiving :: Backup",
    "Topic :: System :: Systems Administration"
]
dependencies = [
    "boto3>=1.26.0",
    "requests>=2.28.0",
    "PyGithub>=1.58.0", 
    "python-gitlab>=3.15.0",
    "atlassian-python-api>=3.36.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
    "gitpython>=3.1.31",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "rich-argparse>=1.3.0",
    "rich>=13.0.0"
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0"
]
dev = [
    "python-semantic-release>=10.0.0",
    "build>=1.0.0",
    "pip-audit>=2.6.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0"
]

[project.scripts]
repo-backup = "src.main:main"

[project.urls]
Repository = "https://github.com/hypersec-io/infra-repo-backup"
Homepage = "https://github.com/hypersec-io/infra-repo-backup"
Issues = "https://github.com/hypersec-io/infra-repo-backup/issues"
Changelog = "https://github.com/hypersec-io/infra-repo-backup/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.semantic_release]
version_variables = [
    "src/__init__.py:__version__",
    "VERSION:{version}"
]
version_toml = [
    "pyproject.toml:project.version"
]
build_command = "python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_repository = false
remove_dist = false
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"

[tool.semantic_release.changelog]
template_dir = "templates"
exclude_commit_patterns = []

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.branches.master]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore", 
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test"
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin" 
type = "github"
ignore_token_for_push = false
token = { env = "GITHUB_CI_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
