#!/bin/bash
# Local release pipeline using semantic release
# This script handles version bumping, changelog generation, and git operations

set -e

# Colors for output  
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🏷️  Running Semantic Release Pipeline${NC}"
echo "=============================================="

# Function to run commands with status output
run_step() {
    local step_name="$1"
    local command="$2"
    
    echo -e "\n${YELLOW}📋 Step: $step_name${NC}"
    echo "Command: $command"
    
    if eval "$command"; then
        echo -e "${GREEN}✅ $step_name - PASSED${NC}"
    else
        echo -e "${RED}❌ $step_name - FAILED${NC}"
        exit 1
    fi
}

# Check if we're in the right directory
if [[ ! -f "pyproject.toml" ]]; then
    echo -e "${RED}❌ Error: Not in repo-backup project directory${NC}"
    exit 1
fi

# Check if git repository is clean
if [[ -n $(git status --porcelain) ]]; then
    echo -e "${RED}❌ Error: Git working directory is not clean${NC}"
    echo "Please commit all changes before running semantic release"
    git status --short
    exit 1
fi

# Check if we're on main branch
current_branch=$(git branch --show-current)
if [[ "$current_branch" != "main" && "$current_branch" != "master" ]]; then
    echo -e "${YELLOW}⚠️  Warning: Not on main/master branch (currently on: $current_branch)${NC}"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled."
        exit 1
    fi
fi

# Step 1: Run full CI pipeline first
echo -e "${BLUE}Running full CI pipeline before release...${NC}"
if [[ -x "./scripts/ci" ]]; then
    ./scripts/ci
else
    echo -e "${RED}❌ Error: scripts/ci not found or not executable${NC}"
    exit 1
fi

# Step 2: Check what the next version would be
echo -e "\n${YELLOW}🔍 Checking next semantic version...${NC}"
next_version=$(uv run semantic-release version --print 2>/dev/null || echo "")

if [[ -z "$next_version" ]]; then
    echo -e "${YELLOW}ℹ️  No new version to release (no conventional commits since last release)${NC}"
    echo "Make sure you have commits with conventional commit format:"
    echo "  - feat: for new features (minor version bump)"
    echo "  - fix: for bug fixes (patch version bump)" 
    echo "  - feat!: or BREAKING CHANGE: for breaking changes (major version bump)"
    exit 0
fi

echo -e "${GREEN}📦 Next version will be: $next_version${NC}"

# Step 3: Generate and show changelog preview
echo -e "\n${YELLOW}📋 Changelog preview for this release:${NC}"
echo "=============================================="
uv run semantic-release changelog --unreleased 2>/dev/null || echo "No changelog preview available"

# Step 4: Confirm release
echo -e "\n${BLUE}Ready to create release v$next_version${NC}"
read -p "Proceed with semantic release? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Release cancelled."
    exit 0
fi

# Step 5: Create semantic release (using CI token from .env)
run_step "Create Semantic Release" "uv run semantic-release version"

# Step 6: Show release summary
echo -e "\n${GREEN}🎉 Release completed successfully!${NC}"
echo "=============================================="

# Get the latest tag (should be the one we just created)
latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

if [[ -n "$latest_tag" ]]; then
    echo -e "${GREEN}📦 Created release: $latest_tag${NC}"
    echo -e "${BLUE}🔗 GitHub release URL: https://github.com/hypersec-io/infra-repo-backup/releases/tag/$latest_tag${NC}"
fi

echo ""
echo "Release summary:"
echo "  - Version bumped and committed"
echo "  - CHANGELOG.md updated"
echo "  - Git tag created"
echo "  - Ready to push to remote repository"
echo ""
echo "Next steps:"
echo "  git push && git push --tags"
echo ""