#!/bin/bash
# Development environment setup script
# Sets up the complete development environment for repo-backup

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üõ†Ô∏è  Setting up repo-backup development environment${NC}"
echo "=================================================="

# Check for required tools
check_tool() {
    local tool="$1"
    local install_hint="$2"
    
    if command -v "$tool" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $tool is installed${NC}"
    else
        echo -e "${RED}‚ùå $tool is not installed${NC}"
        if [[ -n "$install_hint" ]]; then
            echo -e "${YELLOW}   Install with: $install_hint${NC}"
        fi
        exit 1
    fi
}

echo -e "\n${YELLOW}üîç Checking required tools...${NC}"
check_tool "python3" "apt install python3 python3-pip"
check_tool "git" "apt install git"
check_tool "uv" "curl -LsSf https://astral.sh/uv/install.sh | sh"

# Setup virtual environment and dependencies
echo -e "\n${YELLOW}üì¶ Setting up Python environment...${NC}"
if [[ ! -d ".venv" ]]; then
    echo "Creating virtual environment..."
    uv venv
fi

echo "Installing all dependencies..."
uv sync --extra dev --extra test

# Setup git hooks (optional)
echo -e "\n${YELLOW}‚öôÔ∏è  Setting up development tools...${NC}"

# Create git commit template
if [[ ! -f ".gitmessage" ]]; then
    cat > .gitmessage << 'EOF'
# <type>[optional scope]: <description>
# |<----  Using a Maximum Of 50 Characters  ---->|

# Explain why this change is being made
# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|

# Provide links or keys to any relevant tickets, articles or other resources
# Example: Github issue #23

# --- COMMIT END ---
# Type can be 
#    feat     (new feature - minor version bump)
#    fix      (bug fix - patch version bump)
#    refactor (refactoring production code)
#    style    (formatting, missing semi colons, etc; no code change)
#    docs     (changes to documentation)
#    test     (adding or refactoring tests; no production code change)
#    chore    (updating build tasks etc; no production code change)
#    ci       (changes to CI configuration)
#    build    (changes to build system or dependencies)
#    perf     (performance improvements)
# --------------------
# Breaking changes: use feat! or fix! or add BREAKING CHANGE: in footer
EOF

    git config commit.template .gitmessage
    echo "‚úÖ Git commit template configured"
fi

# Test the setup
echo -e "\n${YELLOW}üß™ Testing development setup...${NC}"
echo "Running basic import test..."
if uv run python -c "from src.main import RepoBackupOrchestrator; print('‚úÖ Core imports work')"; then
    echo -e "${GREEN}‚úÖ Development setup successful!${NC}"
else
    echo -e "${RED}‚ùå Development setup failed${NC}"
    exit 1
fi

# Show next steps
echo -e "\n${GREEN}üéâ Development environment ready!${NC}"
echo "=================================================="
echo ""
echo "Available commands:"
echo "  ./scripts/ci          - Run full CI/CD pipeline locally"
echo "  ./scripts/release     - Create semantic release"
echo "  ./scripts/dev-setup   - Re-run this setup script"
echo ""
echo "VS Code:"
echo "  code repo-backup.code-workspace  - Open workspace"
echo ""
echo "Development workflow:"
echo "  1. Make your changes"
echo "  2. Run: ./scripts/ci (tests, formatting, etc.)"
echo "  3. Commit with conventional commit message"
echo "  4. Run: ./scripts/release (semantic versioning)"
echo ""
echo "Testing:"
echo "  uv run pytest tests/ -v"
echo "  uv run python test_mock_install.py"
echo ""